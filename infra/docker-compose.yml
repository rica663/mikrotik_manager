version: '3.8'

services:
  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=mikrotik_manager_db
      - POSTGRES_USER=mikrotik_user
      - POSTGRES_PASSWORD=mikrotik_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mikrotik_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ../backend
      dockerfile: backend.Dockerfile
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ../backend:/app
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=mikrotik_manager_backend.settings
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  celery_worker:
    build:
      context: ../backend
      dockerfile: backend.Dockerfile
    command: celery -A mikrotik_manager_backend worker -l info
    volumes:
      - ../backend:/app
    environment:
      - DJANGO_SETTINGS_MODULE=mikrotik_manager_backend.settings
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  frontend:
    build:
      context: ../frontend
      dockerfile: frontend.Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ../frontend:/app
      - /app/node_modules:/app/node_modules
    depends_on:
      - backend

volumes:
  postgres_data:
